<?php declare(strict_types = 1);

namespace Electry\Battleships\Bot;

use Electry\Battleships\Bot\Engine\Map;
use Electry\Battleships\Bot\Engine\MapHelpers;
use Electry\Battleships\Exceptions\DataException;
use Electry\Battleships\Exceptions\Engine\EngineException;
use Electry\Battleships\Exceptions\Engine\FatalException;
use Electry\Battleships\Exceptions\Engine\OutOfBoundsException;
use Electry\Battleships\Exceptions\NotFoundException;
use Electry\Battleships\Exceptions\SystemException;
use Electry\Battleships\Model\Engine\Enums\Avenger;
use Electry\Battleships\Model\Engine\Enums\Cell;
use Electry\Battleships\Model\Engine\Enums\ShapeType;
use Electry\Battleships\Model\Engine\Shape;
use Electry\Battleships\Storage\IStorage;
use JsonException;
use Tracy\ILogger;

/**
 * The bot.
 *
 * @copyright 2023 Electry Solutions
 * @author    Michal Chvila
 * @since     2023-12-01
 */
final readonly class Bot
{
  /**
   * Constructor.
   *
   * @param IApiClient $client  API client.
   * @param IStorage   $storage Storage.
   * @param ILogger    $logger
   * @param bool       $debug   If true, the bot will pause after every action and print additional info.
   */
  private function __construct(
    private IApiClient $client,
    private IStorage $storage,
    private ILogger $logger,
    private bool $debug = true
  )
  {
  }

  /**
   * Create a new bot.
   *
   * @param IApiClient $client
   * @param IStorage   $storage
   * @param ILogger    $logger
   * @param bool       $debug
   *
   * @return self
   */
  public static function create(IApiClient $client, IStorage $storage, ILogger $logger, bool $debug = true): self
  {
    return new self($client, $storage, $logger, $debug);
  }

  /**
   * Run the bot :)
   *
   * @return void
   * @throws DataException
   * @throws EngineException
   * @throws FatalException
   * @throws OutOfBoundsException
   * @throws SystemException
   */
  public function run(): void
  {
    // Flush local storage
    $this->storage->flush();

    echo 'Precomputing map helpers...' . PHP_EOL;
    MapHelpers::precompute($this->logger);

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Store the bias grid:

    // after 1st submit (checked against 100k)
    // Map::setBiasGridByJsonData('{"0": {"0": 2.7879598197070554, "1": 1.8641668463121943, "2": 1.561492401381073, "3": 1.2565682912299345, "4": 1.3497135731265346, "5": 1.3162020406442363, "6": 1.1766642820042923, "7": 1.3355885497398703, "8": 1.2925322817014797, "9": 1.543483025401626, "10": 1.655154757942705, "11": 2.684009857255777}, "1": {"0": 1.847786598920292, "1": 1.470345057736642, "2": 1.3201829616923957, "3": 1.0454689272933577, "4": 1.0464983774516279, "5": 1.0443238353686115, "6": 1.0494347187390942, "7": 1.0702697691665894, "8": 1.1656773416062078, "9": 1.3060105504957809, "10": 1.3767019519299375, "11": 1.8489216188188347}, "2": {"0": 1.3861437034480777, "1": 1.1467902926894336, "2": 1.1052516333379163, "3": 0.9812645168853815, "4": 0.9134170122260541, "5": 0.9448892129581405, "6": 0.977425829288764, "7": 0.9827762329039215, "8": 0.9402822184679969, "9": 1.0818151697288791, "10": 1.124564995172119, "11": 1.286540563080551}, "3": {"0": 1.0401213249647137, "1": 0.9761072492027383, "2": 0.9544729645773101, "3": 0.832043055749291, "4": 0.8336478265904617, "5": 0.8022193072641542, "6": 0.715200541693079, "7": 0.7284795534522509, "8": 0.6711127157457805, "9": 0.7696100776903659, "10": 0.8358018441708307, "11": 0.8568071245980045}, "4": {"0": 0.7137902719412645, "1": 0.872013155099568, "2": 0.8193617837095042, "3": 0.7696510656315525, "4": 0.8322100608070757, "5": 0.8685846929483517, "6": 0.8269359301612068, "7": 0.8168933112216695, "8": 0.6915422885572139, "9": 0.78674396218143, "10": 0.7099055285370899, "11": 0.6096087446982866}, "5": {"0": 0.7151197654113537, "1": 0.8563340118842563, "2": 0.7521618099976308, "3": 0.6962158902457409, "4": 0.666641259810511, "5": 0.7317269018890222, "6": 0.7462392760606417, "7": 0.8213171830242726, "8": 0.7119504991352649, "9": 0.6734659236255053, "10": 0.7900259274184351, "11": 0.42170520612437473}, "6": {"0": 0.9668127223392645, "1": 1.0323789548987092, "2": 1.0289056685078544, "3": 0.842634552400486, "4": 0.8887225762305948, "5": 0.7459455966918654, "6": 0.93717349189986, "7": 0.9050476143251469, "8": 0.8916536365790096, "9": 0.9299189944605619, "10": 0.8754129817475608, "11": 0.5096870595826329}, "7": {"0": 0.7842913944334553, "1": 0.9839582957519286, "2": 0.9172152867599683, "3": 0.8832493392232906, "4": 0.8083840058964437, "5": 0.8731908080525309, "6": 0.9329429175064016, "7": 0.9651096414232248, "8": 0.9190049751243781, "9": 0.911454464765375, "10": 1.0115565895220255, "11": 0.5370054339798167}, "8": {"0": 0.8600313938329741, "1": 0.9678165946822664, "2": 1.0243686028456445, "3": 0.8585931217393447, "4": 0.8670874413679377, "5": 0.7690643225818472, "6": 0.9209903435295916, "7": 0.889394012782633, "8": 0.9385263226351901, "9": 1.0178156154095424, "10": 0.9660793889877829, "11": 0.5879750320693399}, "9": {"0": 0.7378872063042451, "1": 0.9343643897504124, "2": 0.801736111111111, "3": 0.8173842326827401, "4": 0.6798983303181063, "5": 0.539533253497678, "6": 0.6575372296765332, "7": 0.8260471372762268, "8": 0.9333644278606964, "9": 0.8530946488311242, "10": 0.9578084989270643, "11": 0.414828634604754}, "10": {"0": 0.9572968490878939, "1": 0.9525926876673146, "2": 0.9759006190590632, "3": 0.8700854835989543, "4": 0.8606515773946422, "5": 0.7858941529657963, "6": 0.8798187227901774, "7": 1.073824508684109, "8": 1.032037672599569, "9": 1.0077964535122552, "10": 0.9345325936026999, "11": 0.7367550433486575}, "11": {"0": 1.1852246702992972, "1": 1.0208963809082285, "2": 0.8376347429519071, "3": 0.7029940699838775, "4": 0.681731180387286, "5": 0.5607487983809765, "6": 0.6447502392214152, "7": 0.6922967941748212, "8": 0.6390140092376989, "9": 0.4001473041180166, "10": 0.5355937355025516, "11": 0.014467962454728873}}');

    // after 3rd submit
    // Map::setBiasGridByJsonData('{"0": {"0": 2.8953220089614122, "1": 1.8456099360550908, "2": 1.4837997914869139, "3": 1.2585249531595981, "4": 1.348529613851862, "5": 1.2873550401427296, "6": 1.137065003282994, "7": 1.3394882945443296, "8": 1.2867040388582074, "9": 1.516848288121184, "10": 1.6806276518913064, "11": 2.697429906542056}, "1": {"0": 1.9651063829787232, "1": 1.5284367232248999, "2": 1.2420142336974511, "3": 1.0327071791320406, "4": 1.0200998657497466, "5": 1.0256407565964352, "6": 1.0325441458458544, "7": 1.0850563909774438, "8": 1.168522267206478, "9": 1.3040816949566492, "10": 1.4126339916589115, "11": 1.8303765680692496}, "2": {"0": 1.5037125418314574, "1": 1.1698554357942774, "2": 1.0572913860906104, "3": 0.9470938945301397, "4": 0.9023527891290434, "5": 0.9390119116335204, "6": 0.980530176296487, "7": 0.9674742345407243, "8": 0.9023527891290434, "9": 1.0353763897256147, "10": 1.132608663091993, "11": 1.1854084271372072}, "3": {"0": 1.0392089378375515, "1": 0.9842147189535176, "2": 0.881274905552968, "3": 0.8518199704869651, "4": 0.8458586562252277, "5": 0.7793849231153894, "6": 0.7184832859174964, "7": 0.6938586766250437, "8": 0.6447938936798866, "9": 0.7108990147783251, "10": 0.8310059887135782, "11": 0.8077975065425995}, "4": {"0": 0.7669136433316301, "1": 0.8968731792581084, "2": 0.8289851603638104, "3": 0.7908287865430893, "4": 0.8304298245614036, "5": 0.8474345441750989, "6": 0.842771905692705, "7": 0.789921052631579, "8": 0.6776315789473685, "9": 0.7348035138132688, "10": 0.6904904306220095, "11": 0.5653360658710871}, "5": {"0": 0.6740284071104914, "1": 0.8555828416983928, "2": 0.7233709273182957, "3": 0.6904904306220095, "4": 0.6206079265014905, "5": 0.6475001260334744, "6": 0.6952477465810194, "7": 0.8199573863636364, "8": 0.6583147348800705, "9": 0.71537595791497, "10": 0.7196858996702147, "11": 0.42340065834198004}, "6": {"0": 0.9462784695336752, "1": 1.0342313094828575, "2": 1.001754817654372, "3": 0.8744929873430094, "4": 0.8777867842959834, "5": 0.7306777043619149, "6": 0.8819477372108951, "7": 0.9084193040741388, "8": 0.8535776942355889, "9": 0.9277942189453274, "10": 0.8741200785790292, "11": 0.4873495599065924}, "7": {"0": 0.8337648840977947, "1": 1.0377312830157368, "2": 0.9540466612002255, "3": 0.9146839423709807, "4": 0.8298672027290448, "5": 0.8097755494362757, "6": 0.8843952775775055, "7": 0.9115932233367865, "8": 0.8535776942355889, "9": 0.9414010378057821, "10": 1.007081690816109, "11": 0.5757721847258703}, "8": {"0": 0.8326502251618351, "1": 0.9697939904706823, "2": 0.9898946594806468, "3": 0.875470982724709, "4": 0.8831026229427296, "5": 0.7751854178986792, "6": 0.9553496980569522, "7": 0.8591916160359174, "8": 0.9006677232296427, "9": 1.0039889594676346, "10": 0.9600702827404904, "11": 0.5442637303431322}, "9": {"0": 0.6985545524394928, "1": 0.888597712945316, "2": 0.7990988212719298, "3": 0.8106623228744939, "4": 0.6689126046650717, "5": 0.5796876609331549, "6": 0.6649167109693426, "7": 0.8374596306201746, "8": 0.9056047570850202, "9": 0.8422156930984633, "10": 0.9418127092182622, "11": 0.3903188961988304}, "10": {"0": 0.9928620571035431, "1": 0.9890808871072029, "2": 0.986853064087203, "3": 0.8528727140945583, "4": 0.863663376027742, "5": 0.7956693577878421, "6": 0.8994003544984133, "7": 1.061092639147947, "8": 1.0235505206867437, "9": 1.0452378078223081, "10": 0.9696248600223963, "11": 0.7691538974017321}, "11": {"0": 1.1654309384572543, "1": 1.0092241496753098, "2": 0.8477003054511278, "3": 0.6655213747163458, "4": 0.6735343218209234, "5": 0.6179304192685102, "6": 0.6446467812241075, "7": 0.7545094109445799, "8": 0.6604691075514874, "9": 0.41890420899854863, "10": 0.5372948045354544, "11": 0.019131976667108575}}');

    // after 4th submit
    // Map::setBiasGridByJsonData('{"0": {"0": 2.7879598197070554, "1": 1.8641668463121943, "2": 1.561492401381073, "3": 1.2565682912299345, "4": 1.3497135731265346, "5": 1.3162020406442363, "6": 1.1766642820042923, "7": 1.3355885497398703, "8": 1.2925322817014797, "9": 1.543483025401626, "10": 1.655154757942705, "11": 2.684009857255777}, "1": {"0": 1.847786598920292, "1": 1.470345057736642, "2": 1.3201829616923957, "3": 1.0454689272933577, "4": 1.0464983774516279, "5": 1.0443238353686115, "6": 1.0494347187390942, "7": 1.0702697691665894, "8": 1.1656773416062078, "9": 1.3060105504957809, "10": 1.3767019519299375, "11": 1.8489216188188347}, "2": {"0": 1.3861437034480777, "1": 1.1467902926894336, "2": 1.1052516333379163, "3": 0.9812645168853815, "4": 0.9134170122260541, "5": 0.9448892129581405, "6": 0.977425829288764, "7": 0.9827762329039215, "8": 0.9402822184679969, "9": 1.0818151697288791, "10": 1.124564995172119, "11": 1.286540563080551}, "3": {"0": 1.0401213249647137, "1": 0.9761072492027383, "2": 0.9544729645773101, "3": 0.832043055749291, "4": 0.8336478265904617, "5": 0.8022193072641542, "6": 0.715200541693079, "7": 0.7284795534522509, "8": 0.6711127157457805, "9": 0.7696100776903659, "10": 0.8358018441708307, "11": 0.8568071245980045}, "4": {"0": 0.7137902719412645, "1": 0.872013155099568, "2": 0.8193617837095042, "3": 0.7696510656315525, "4": 0.8322100608070757, "5": 0.8685846929483517, "6": 0.8269359301612068, "7": 0.8168933112216695, "8": 0.6915422885572139, "9": 0.78674396218143, "10": 0.7099055285370899, "11": 0.6096087446982866}, "5": {"0": 0.7151197654113537, "1": 0.8563340118842563, "2": 0.7521618099976308, "3": 0.6962158902457409, "4": 0.666641259810511, "5": 0.7317269018890222, "6": 0.7462392760606417, "7": 0.8213171830242726, "8": 0.7119504991352649, "9": 0.6734659236255053, "10": 0.7900259274184351, "11": 0.42170520612437473}, "6": {"0": 0.9668127223392645, "1": 1.0323789548987092, "2": 1.0289056685078544, "3": 0.842634552400486, "4": 0.8887225762305948, "5": 0.7459455966918654, "6": 0.93717349189986, "7": 0.9050476143251469, "8": 0.8916536365790096, "9": 0.9299189944605619, "10": 0.8754129817475608, "11": 0.5096870595826329}, "7": {"0": 0.7842913944334553, "1": 0.9839582957519286, "2": 0.9172152867599683, "3": 0.8832493392232906, "4": 0.8083840058964437, "5": 0.8731908080525309, "6": 0.9329429175064016, "7": 0.9651096414232248, "8": 0.9190049751243781, "9": 0.911454464765375, "10": 1.0115565895220255, "11": 0.5370054339798167}, "8": {"0": 0.8600313938329741, "1": 0.9678165946822664, "2": 1.0243686028456445, "3": 0.8585931217393447, "4": 0.8670874413679377, "5": 0.7690643225818472, "6": 0.9209903435295916, "7": 0.889394012782633, "8": 0.9385263226351901, "9": 1.0178156154095424, "10": 0.9660793889877829, "11": 0.5879750320693399}, "9": {"0": 0.7378872063042451, "1": 0.9343643897504124, "2": 0.801736111111111, "3": 0.8173842326827401, "4": 0.6798983303181063, "5": 0.539533253497678, "6": 0.6575372296765332, "7": 0.8260471372762268, "8": 0.9333644278606964, "9": 0.8530946488311242, "10": 0.9578084989270643, "11": 0.414828634604754}, "10": {"0": 0.9572968490878939, "1": 0.9525926876673146, "2": 0.9759006190590632, "3": 0.8700854835989543, "4": 0.8606515773946422, "5": 0.7858941529657963, "6": 0.8798187227901774, "7": 1.073824508684109, "8": 1.032037672599569, "9": 1.0077964535122552, "10": 0.9345325936026999, "11": 0.7367550433486575}, "11": {"0": 1.1852246702992972, "1": 1.0208963809082285, "2": 0.8376347429519071, "3": 0.7029940699838775, "4": 0.681731180387286, "5": 0.5607487983809765, "6": 0.6447502392214152, "7": 0.6922967941748212, "8": 0.6390140092376989, "9": 0.4001473041180166, "10": 0.5355937355025516, "11": 0.014467962454728873}}');

    // after 5th submit (checked against 100k)
    // Map::setBiasGridByJsonData('{"0": {"0": 2.7879598197070554, "1": 1.8641668463121943, "2": 1.561492401381073, "3": 1.2565682912299345, "4": 1.3497135731265346, "5": 1.3162020406442363, "6": 1.1766642820042923, "7": 1.3355885497398703, "8": 1.2925322817014797, "9": 1.543483025401626, "10": 1.655154757942705, "11": 2.684009857255777}, "1": {"0": 1.847786598920292, "1": 1.470345057736642, "2": 1.3201829616923957, "3": 1.0454689272933577, "4": 1.0464983774516279, "5": 1.0443238353686115, "6": 1.0494347187390942, "7": 1.0702697691665894, "8": 1.1656773416062078, "9": 1.3060105504957809, "10": 1.3767019519299375, "11": 1.8489216188188347}, "2": {"0": 1.3861437034480777, "1": 1.1467902926894336, "2": 1.1052516333379163, "3": 0.9812645168853815, "4": 0.9134170122260541, "5": 0.9448892129581405, "6": 0.977425829288764, "7": 0.9827762329039215, "8": 0.9402822184679969, "9": 1.0818151697288791, "10": 1.124564995172119, "11": 1.286540563080551}, "3": {"0": 1.0401213249647137, "1": 0.9761072492027383, "2": 0.9544729645773101, "3": 0.832043055749291, "4": 0.8336478265904617, "5": 0.8022193072641542, "6": 0.715200541693079, "7": 0.7284795534522509, "8": 0.6711127157457805, "9": 0.7696100776903659, "10": 0.8358018441708307, "11": 0.8568071245980045}, "4": {"0": 0.7137902719412645, "1": 0.872013155099568, "2": 0.8193617837095042, "3": 0.7696510656315525, "4": 0.8322100608070757, "5": 0.8685846929483517, "6": 0.8269359301612068, "7": 0.8168933112216695, "8": 0.6915422885572139, "9": 0.78674396218143, "10": 0.7099055285370899, "11": 0.6096087446982866}, "5": {"0": 0.7151197654113537, "1": 0.8563340118842563, "2": 0.7521618099976308, "3": 0.6962158902457409, "4": 0.666641259810511, "5": 0.7317269018890222, "6": 0.7462392760606417, "7": 0.8213171830242726, "8": 0.7119504991352649, "9": 0.6734659236255053, "10": 0.7900259274184351, "11": 0.42170520612437473}, "6": {"0": 0.9668127223392645, "1": 1.0323789548987092, "2": 1.0289056685078544, "3": 0.842634552400486, "4": 0.8887225762305948, "5": 0.7459455966918654, "6": 0.93717349189986, "7": 0.9050476143251469, "8": 0.8916536365790096, "9": 0.9299189944605619, "10": 0.8754129817475608, "11": 0.5096870595826329}, "7": {"0": 0.7842913944334553, "1": 0.9839582957519286, "2": 0.9172152867599683, "3": 0.8832493392232906, "4": 0.8083840058964437, "5": 0.8731908080525309, "6": 0.9329429175064016, "7": 0.9651096414232248, "8": 0.9190049751243781, "9": 0.911454464765375, "10": 1.0115565895220255, "11": 0.5370054339798167}, "8": {"0": 0.8600313938329741, "1": 0.9678165946822664, "2": 1.0243686028456445, "3": 0.8585931217393447, "4": 0.8670874413679377, "5": 0.7690643225818472, "6": 0.9209903435295916, "7": 0.889394012782633, "8": 0.9385263226351901, "9": 1.0178156154095424, "10": 0.9660793889877829, "11": 0.5879750320693399}, "9": {"0": 0.7378872063042451, "1": 0.9343643897504124, "2": 0.801736111111111, "3": 0.8173842326827401, "4": 0.6798983303181063, "5": 0.539533253497678, "6": 0.6575372296765332, "7": 0.8260471372762268, "8": 0.9333644278606964, "9": 0.8530946488311242, "10": 0.9578084989270643, "11": 0.414828634604754}, "10": {"0": 0.9572968490878939, "1": 0.9525926876673146, "2": 0.9759006190590632, "3": 0.8700854835989543, "4": 0.8606515773946422, "5": 0.7858941529657963, "6": 0.8798187227901774, "7": 1.073824508684109, "8": 1.032037672599569, "9": 1.0077964535122552, "10": 0.9345325936026999, "11": 0.7367550433486575}, "11": {"0": 1.1852246702992972, "1": 1.0208963809082285, "2": 0.8376347429519071, "3": 0.7029940699838775, "4": 0.681731180387286, "5": 0.5607487983809765, "6": 0.6447502392214152, "7": 0.6922967941748212, "8": 0.6390140092376989, "9": 0.4001473041180166, "10": 0.5355937355025516, "11": 0.014467962454728873}}');

    // after 6th submit (checked against 100k)
    // Map::setBiasGridByJsonData('{"0": {"0": 2.7700677619538614, "1": 1.7570088502068946, "2": 1.5426514554011828, "3": 1.2882723898368533, "4": 1.3805284714537722, "5": 1.251059284209524, "6": 1.2645283360291306, "7": 1.2128783647865182, "8": 1.3301093615985906, "9": 1.4272491932508078, "10": 1.460304812929767, "11": 2.6320569652883283}, "1": {"0": 1.8011291325065855, "1": 1.305584655675439, "2": 1.2346016514170943, "3": 1.0016453435871207, "4": 1.0132122714334146, "5": 0.9764064418722408, "6": 1.0653167824690684, "7": 1.003113709283881, "8": 1.149042674923464, "9": 1.2181181776952648, "10": 1.1987170674742744, "11": 1.816351907295017}, "2": {"0": 1.382417327434542, "1": 1.1230594693737135, "2": 1.054892418658745, "3": 0.9453513337686401, "4": 0.93264819358392, "5": 0.8795448391560214, "6": 0.9566471240638367, "7": 0.8812824985777437, "8": 0.9607995494807353, "9": 0.9927620705786302, "10": 0.9723462771583705, "11": 1.2950417999743662}, "3": {"0": 1.0249882042254692, "1": 0.9268853269087616, "2": 0.8297009450527935, "3": 0.7747251102069722, "4": 0.8062317487783327, "5": 0.7619305301012953, "6": 0.7243701397467963, "7": 0.7230709987760516, "8": 0.6956521739130435, "9": 0.733298723103433, "10": 0.7387783101037644, "11": 0.8211317821740819}, "4": {"0": 0.7275512953274125, "1": 0.8244967365042172, "2": 0.7742083136099634, "3": 0.7487002699817344, "4": 0.833184837156737, "5": 0.811713879296957, "6": 0.7657677344357284, "7": 0.7685045328197816, "8": 0.7231919040162317, "9": 0.7339254806446598, "10": 0.6746305099589613, "11": 0.6031827533602157}, "5": {"0": 0.7313343406391299, "1": 0.8302789581302498, "2": 0.7455825591477765, "3": 0.6878583728963886, "4": 0.6965153582429573, "5": 0.7319433537890192, "6": 0.71631996603266, "7": 0.7911767446444553, "8": 0.6722425522141843, "9": 0.6404644451906593, "10": 0.7764675385496171, "11": 0.3954008684750435}, "6": {"0": 0.9130914680063131, "1": 1.031880054366593, "2": 0.9418264096262474, "3": 0.813645427648606, "4": 0.8674987175380314, "5": 0.7883502921432225, "6": 0.9024266258886146, "7": 0.9060303026696342, "8": 0.8448633954887678, "9": 0.90874788341433, "10": 0.8916398254948119, "11": 0.511671803540723}, "7": {"0": 0.8186519369718921, "1": 0.9776501517005851, "2": 0.893609718178029, "3": 0.8418752077401476, "4": 0.7780113248844143, "5": 0.7985302339452087, "6": 0.8724515945625717, "7": 0.8598007152783131, "8": 0.8118593034606539, "9": 0.8408248743789501, "10": 0.9791594599642348, "11": 0.4879353470781649}, "8": {"0": 0.7821920438054408, "1": 0.9450759317649907, "2": 0.9144069321339227, "3": 0.8310376511981187, "4": 0.7918601181357461, "5": 0.736574551052129, "6": 0.8552804590824452, "7": 0.8544945220434655, "8": 0.8493728221192114, "9": 0.9659549006671017, "10": 0.9309438169159252, "11": 0.5715060497669193}, "9": {"0": 0.7711040345978536, "1": 0.9085312401577755, "2": 0.8102597409930237, "3": 0.7726145292194803, "4": 0.6969331486107402, "5": 0.5613130686473792, "6": 0.7024311017875338, "7": 0.7985302339452087, "8": 0.9042912567526639, "9": 0.8368303108320672, "10": 0.9311244023706282, "11": 0.40291995285143406}, "10": {"0": 0.9330055323537287, "1": 1.0211256071865409, "2": 0.9616537529654061, "3": 0.8759984764741503, "4": 0.8315299535240097, "5": 0.8033068701322228, "6": 0.921516474784489, "7": 1.0520773511348684, "8": 0.9691422367825975, "9": 0.9560408701099519, "10": 0.9076925213289481, "11": 0.6856307781815177}, "11": {"0": 1.1308672290617758, "1": 0.979018503976198, "2": 0.8265725384730315, "3": 0.6991303198975225, "4": 0.6527145242599284, "5": 0.5526109049088243, "6": 0.6554874167582248, "7": 0.6705048658867742, "8": 0.629134822455933, "9": 0.4118502981318809, "10": 0.48880462393697305, "11": 0.01900373178708847}}');

    // after 7th submit (checked against 100k)
    Map::setShapeTypeBiasGridByJsonData('{"helicarrier":[[0.01,1.6031350195938723,0.7294355291213107,0.6923609508423725,0.4157218442932729,0.4915677229070559,0.1898686109212425,0.4581201801939375,0.8025682182985554,1.0139702568724651,1.4904838339830313,0.01],[1.6031350195938723,0.9473285335354301,0.778906069697669,0.5093148018199515,0.42759109776192566,0.3622663382118534,0.33382711928060255,0.4473388539802755,0.7113028314441742,0.9146515749156806,1.264561618638872,1.4904838339830313],[0.5519982336056525,0.7756169027031684,0.44302071973827695,0.36913990402362495,0.2801766761157624,0.30430134057077063,0.24557152680003927,0.3706937739921248,0.4749591007441025,0.6874742197167606,1.0169297315878427,1.2944222169922335],[1.2341869793273683,0.8951232777374909,0.6412058182840278,0.4409610105119415,0.3761519653940192,0.40004800576069127,0.29391724893455,0.39948865452221155,0.5136180108715812,0.662182413829157,1.0952531502642158,1.1979634621144055],[1.1544763890957843,1.0320556484405639,0.6672525469517951,0.554072096128171,0.5012753968958996,0.5178729316660351,0.4898820514752987,0.5884046721834821,0.608860240102712,0.8753302750806438,1.1976415673750156,1.567398119122257],[1.210012856386599,1.0223455527968455,0.7085036728178902,0.6450298750678978,0.5155028038323233,0.6884681583476764,0.6008247109716917,0.752671985548698,0.7622970551261135,0.9606690777576854,1.6347548889388397,1.5329586101175268],[1.414805750994188,1.2216259109988097,0.797434917681458,0.7309347843742386,0.6371230355373071,0.6439601637316535,0.788239214580503,0.8546359250959091,1.0131712259371835,1.3813744675952573,1.9238287278039543,2.4643417220521244],[1.6424965948241328,1.4157973174366616,0.9853959270301683,0.8947498829942461,0.6564774566916085,0.755345522156802,0.8165452480894118,1.0301280665386425,1.1554325482661796,1.5825639175426798,2.350445128546468,2.5178184071893397],[1.7622797150356204,1.522476872297894,1.1371980157237775,0.9781779996259908,0.7947829631139189,0.7109322602280349,0.9455782312925171,1.107833584709227,1.3966280385612584,1.9571865443425076,2.5445002282062985,3.3760716182383734],[1.8545106484804976,1.6504492092195526,1.2469990443558727,1.1076923076923075,0.8950948800572861,0.8054936292776593,1.0813887307911212,1.3418779785624826,1.773917298752141,2.0459837677751906,3.003736705949986,2.599550986647761],[2.2641509433962264,2.1415305310237653,1.7480053004031688,1.5508263527280959,1.4227977565160015,1.4062370750268838,1.7081656606304494,2.135290337292949,2.4174420726144867,2.959163543105149,3.4843205574912894,4.579470568524517],[0.01,2.2641509433962264,2.2857142857142856,1.9615099925980755,1.7229755037830548,1.3455328310010766,2.1740849078978575,2.5896722325293755,3.383053975088421,3.2265242545616375,4.579470568524517,0.01]],"carrier":[[4.6691833896284525,3.7209625817220755,2.6755310523755473,2.324663362428177,2.2670025188916876,1.6674520607532533,1.436572592377073,1.3410502540937324,1.8154501064229376,1.9404237465911476,1.6211208893006022,2.985910236073528],[2.46415770609319,2.3880280195287624,1.8827959519887032,1.7506004966820012,1.7601915088361613,1.4468864468864469,1.2178469941321919,1.069823835675059,1.4519641848834395,1.5272556390977443,1.2023171931358618,1.9438587243015286],[2.225959635931935,2.299825838431653,1.990529271256757,2.0285558242958572,2.123030494438011,1.6166960611405057,1.3810628659816595,1.1799098337559877,1.4632268001540238,1.3857394809775763,1.0148069560404078,1.5358184089962517],[1.8132181566294514,2.0453998556188338,1.8163152491510701,1.9960861056751469,2.234451174471857,1.6891235972508056,1.4649984162179284,1.3392857142857144,1.554907677356657,1.346961413517154,0.9628114093152004,1.3566475731082304],[1.3515825491873394,1.6189772287333262,1.516258677383997,1.696684938658314,1.9665860787356115,1.6606804927972811,1.4313164189639622,1.1969302260085897,1.4271077283372366,1.21464829586657,0.8023722309436595,1.0933859114536657],[0.6015782582540076,0.630143079546297,0.7864047874789013,0.9382393734192706,0.9873060648801129,0.4489673750374139,0.4581551618814905,0.38516350190655935,0.2923406743324888,0.22790291335890914,0.10787098630038475,0.11011598884157979],[0.6178942165101334,0.634517766497462,0.7798284377436964,0.9571667863125151,1.0780164497324922,0.5861919235779418,0.5972658496659735,0.4623208506703652,0.36207104638532406,0.22699757869249396,0.07222302470027445,0.0743853907092647],[0.6234413965087283,0.6188118811881189,0.7678571428571429,0.9705476128261601,1.0060362173038229,0.4612014297244321,0.48221820373719115,0.33877754796376863,0.1864002385923054,0.12572290671360323,0.052405408238130176,0.05386770092652445],[0.6446621970087675,0.6060116354234001,0.6981290142418319,0.7720937598986379,0.8427597572851898,0.43723666428173946,0.44859508176664903,0.36461751622547944,0.3188775510204082,0.20103735274013912,0.061032672824185216,0.06387055567383436],[0.983937878949048,0.8539118393722595,0.9041591320072333,0.9505326943641333,0.9166726579912288,0.4096529122597945,0.41927123037048336,0.3914869385721404,0.3375829063902458,0.2949852507374631,0.13798178640419465,0.15455154293957035],[1.0827803003842122,0.8487105075836391,0.912533649678332,0.8368200836820083,0.8102871234807115,0.3974275597947829,0.3968253968253968,0.2987172728870146,0.3107391448458734,0.24951231683527655,0.1078167115902965,0.13338668800853673],[2.1613832853025934,1.4866204162537164,1.262558426905926,1.1195012731583107,1.0264305876315114,0.40282711392683196,0.394335902491486,0.30116213151927435,0.27238821606671415,0.20249063480814014,0,0]],"battleship":[[3.4725571525031347,1.818054681490805,1.6190835986831453,1.5118317265556531,1.2283894449499546,1.2079496763606528,1.7749055659218131,1.5808692554328465,1.3753056234718826,2.0936429387133613,2.253482655012292,4.303521962801741],[2.3487151146725616,1.4091949973577593,1.3448894202032275,1.6228713707705305,1.3406086833811564,1.4265692261487637,2.082169519069626,1.5543545841503659,1.3355295374616034,1.828932204239114,1.8789266631436792,2.9602284599846764],[2.089024586212438,1.4701409307512927,1.4720314033366044,1.6410165432208275,1.2686710072769056,1.4508523757707654,2.2279486766521717,1.9429389508129666,1.5123313168915775,1.904432132963989,1.6617429837518463,2.2848438690022848],[1.5853443720274794,1.1549395877754087,1.291141456582633,1.5282392026578073,1.3759889920880635,1.5226494099733536,2.0719738276990185,1.8157638995447802,1.1167694094523362,1.4857142857142858,1.3412748931526781,1.7823723375813207],[0.36559729458002005,0.32894736842105265,0.4832785617630002,0.73221229106701,0.8335728657660246,1.0406811731315044,0.988203322833673,0.7939775333764629,0.5888992491534574,0.39876383212042665,0.2965892239248641,0.25167017479637593],[0.447164038597317,0.4573867967678,0.634920634920635,0.8764241893076249,0.874508089199825,1.075940580313758,0.9555661729574773,0.8335470633495768,0.32979717473753645,0.215959399632869,0.10218679746576742,0.09240436148586213],[0.6572461386789353,0.7309941520467836,1.0903095415381343,1.33587786259542,1.2884168185532021,1.1603303528769366,1.2163805919718882,0.7598784194528876,0.5938883489903898,0.6394202589652049,0.34674063800277394,0.20637468470534281],[0.8438241196861886,0.9081983308787432,1.291476256705742,1.3246026192142357,1.0913895111723821,0.9540770894288259,1.033792078568198,0.7243146868731892,0.5870841487279844,0.6604696673189824,0.2763194252555955,0.15532774153463808],[0.7804032083243009,0.8597674102900583,1.1281688271468389,1.2025012025012025,0.8420844065781652,0.9398496240601504,0.9803921568627452,0.6138584687914354,0.5556049426615699,0.5821764442454098,0.2617230098146129,0.1721170395869191],[1.0116607209413768,0.9970344616013908,1.071785833373029,0.97074227921257,0.5665024630541872,0.5878894767783657,0.7434944237918216,0.5305295649657568,0.5526816111774329,0.566331587144273,0.34013605442176875,0.23599748269351792],[1.0351966873706004,0.884016973125884,0.9753092757045326,1.0640706361784016,0.5522208883553421,0.7246376811594203,0.6618470624172691,0.4014167650531287,0.38281390740407134,0.3017046311660884,0.1725327812284334,0.2072395689416966],[1.2237128353879623,0.8961763143919277,0.7945051002101594,0.9025649636875027,0.40028464685998927,0.4832474226804123,0.4609781957313419,0.18094634940740073,0.13367792531859907,0.07995735607675906,0,0]],"destroyer":[[3.889205084424208,2.94367995460349,2.875006978172277,1.9280592878231007,1.960910376751961,2.013514435874684,1.9333011116481393,1.938493888815876,1.8716249386352481,1.8675905375412765,2.308593480807663,4.010190602000377],[2.689636388397113,2.557871850620284,2.6627868672449764,1.6329986694084915,1.6428229173796975,1.8031942297784649,2.145446474809499,2.132717991748829,1.965065502183406,1.8000327278677795,2.061919123530498,2.9820376087566656],[1.716001716001716,1.8307683505921393,2.160558100791337,1.5955325089748704,1.5967153284671536,1.7040613462084637,1.912644317707609,1.9286729376734115,1.8109488184301152,1.5070415215922672,1.6420361247947455,2.199086961362877],[0.20104543626859672,0.2814610958218664,0.4954246080317072,0.4341147398650905,0.6431385159578744,0.6533101045296167,0.4592134925273441,0.5704506560182544,0.25329280648429586,0.2762600527963657,0.12704058946833513,0.1477017606049864],[0.4919746633048398,0.5843530867592466,0.8325008325008324,0.5116096025186935,0.7719553174098628,0.7763975155279503,0.6117071334462638,0.8122010648858407,0.41121802779833866,0.5460378131185585,0.21536252692031588,0.2548744743213967],[0.6610696106299992,1.0617265870981913,1.0458063166701526,0.4674088552732218,1.058914131690412,1.2306430109732336,1.1659738416303356,1.0053619302949062,0.5449096358187268,0.47521567480625826,0.41244844394450697,0.264918206503742],[1.0719158058857923,1.695176452458006,1.7066059873426724,0.8797653958944281,1.1746634137525978,1.293274970155193,1.3255837666972572,1.7063228742060859,1.161790017211704,1.0849909584086799,0.5274261603375527,0.3331556503198294],[0.6778129236330772,1.1773940345368918,1.059672826014968,0.5302226935312832,0.9682246281137223,1.4673861592350657,1.8996960486322187,1.771670555699594,1.0392517387481013,0.6622955162593549,0.5198585984612185,0.31494079113126733],[0.8556086623001121,1.0736390046734874,1.3368171598711796,0.6972042111134351,0.9355678490074846,0.7266820552278362,0.8559445347941453,1.014832162373146,0.6302521008403361,0.4934115051953329,0.15623047119110112,0.12055455093429777],[0.5582537821693742,0.5515719801434087,0.6420545746388443,0.24161884627000904,0.31176389081335737,0.360386334150209,0.39344731382788467,0.5020752443432855,0.2079866888519135,0.15208354456047857,0.10921799912625602,0.11222085063404781],[0.5283178360101437,0.4705439488048184,0.5919494869771112,0.2479082739386427,0.3154353007149867,0.6576543660942638,0.7697044334975369,0.9594882729211087,0.3824823101931536,0.3030136080656713,0.09540770894288259,0.11017260374586854],[0.6207028265851796,0.4560763401627842,0.3850596842510589,0.02952814031772279,0.12460282848420659,0.16315342948508776,0.2337540906965872,0.32306002455256183,0.2420281962848672,0.17006802721088435,0,0]],"submarine":[[1.4447182799354128,0.7450599287333981,0.8145809998981773,0.8396775638154949,0.9764469167948869,1.3442502749602836,1.300954032957502,1.2272950417280315,1.1200089600716805,0.7020645899422746,0.8648302370275464,1.1940298507462686],[1.212817566704966,0.8403361344537814,0.9867339107553996,0.9372979961215254,1.2409664939046645,1.8373909049150208,1.9895451353670905,1.7216117216117217,1.4157014157014158,0.8084074373484236,0.8830022075055188,0.9356045941411795],[0.9580959104432454,0.8275783345699446,0.8971449680721938,0.8636683513530804,1.2908777969018932,1.7510579308332117,1.5616866215512752,1.4910536779324055,1.3256738842244806,0.8740781207320404,0.8267195767195767,0.7860439170343323],[0.5085895117540687,0.6398599043577827,0.7459903021260724,0.5350454788657036,0.9570210544631982,0.8557016753738066,0.8189262966333031,0.8828722778104766,0.6248535499492306,0.42808219178082196,0.35233824471492636,0.2788000446080071],[0.4515080368430558,0.6576543660942638,0.8309673845301573,1.1317907444668007,1.4014762216201067,1.5032489574241101,1.1979634621144055,1.436914804857699,1.0131712259371835,0.7221954742416947,0.4633589962931281,0.43898156277436345],[1.038846565510294,1.1112814224402205,1.2728361784965558,1.1973841761075805,1.327478811395895,1.4097744360902256,2.0329670329670333,2.2948938611589216,1.9778836644790074,1.1726564116713802,0.727749072119933,0.6409023905659168],[1.6493275818320225,1.8847603661820143,1.9820493642483175,1.2987012987012987,2.359200883445437,2.3658512030605054,3.10322299651568,2.2081413210445464,1.7680339462517678,1.1514933429291112,1.2668604217899992,0.8087474120082816],[1.1030288576198426,1.0666116157445635,1.004621257785815,0.8787346221441126,1.976284584980237,2.1630124864811724,2.4043277900220397,1.7142857142857142,1.2777182425191655,0.9818360333824252,1.1259676284306828,0.6625441696113074],[0.8457928625995853,0.9477475200606558,0.9690528290090653,0.5428881650380022,1.4943215780035866,1.9581664441477529,1.99832698206153,1.426126640045636,0.7154153174184803,0.7075319997427156,0.7824215948360176,0.4016064257028113],[0.5542957923910306,0.574052812858783,0.6577216521967902,0.34674063800277394,0.584634431528991,0.6307977736549165,0.8688726377525161,0.7966011683483802,0.5551443375277572,0.5822981366459626,0.4183633625257991,0.38471402923826625],[1.0055793434540028,0.992063492063492,1.0360082880663046,0.36274897770742653,0.765430380627653,1.0845175766641735,1.2473402303910777,1.0402219140083218,0.5462373883426515,0.5220114842526535,0.3537659998713578,0.35488450122596465],[1.6017316017316017,1.2201556522886163,1.1785201885632302,0.43465662126919735,0.7654154675157675,1.2101278391460843,1.3153869684918935,1.1587829807463752,0.4555030461766213,0.1859427296392711,0.03278043663541598,0.04339524388127061]],"patrol_boat":[[2.075863370447254,1.1738759248719408,1.0660980810234542,1.0351966873706007,1.7399839386097975,1.4285714285714286,1.056499770326137,1.1694854264123786,1.5717778553964372,1.5945702837517377,1.0040855896406067,2.592352559948153],[1.5063406431724236,1.0827637544833186,1.0924369747899159,1.1345698500394632,1.906099518459069,1.6307893020221786,1.2660898923823591,1.7187342028106358,2.2933588150979456,1.7897819720143184,0.9220839096357768,1.9429136639819133],[0.3869370066553165,0.4886789379377749,0.35486160397445,0.887679015268079,0.7518796992481203,0.6139991813344249,0.5092946269416857,0.5580357142857142,0.7567819303760625,0.3799392097264438,0.2376990729736154,0.27548209366391185],[0.7020007020007021,0.8776206728425159,0.29491565412292087,0.8487855837033168,0.7185972980741593,1.0672358591248667,0.6435006435006434,0.8910008910008911,1.2815324430055308,0.4012841091492777,0.2978258711406731,0.27124773960216997],[0.7440476190476191,0.8717054661060404,1.0568195946786025,1.5761570425562403,1.514921981517952,1.6111707841031149,1.518141794443601,1.596169193934557,1.445086705202312,0.42372881355932207,0.8723316912972086,0.42376871645164327],[1.3755158184319118,1.5586369988175857,1.2998266897746966,1.4712373105781962,2.1953896816684964,2.1390374331550803,2.032214360981484,2.6283240568954853,2.4003491416933374,1.2368583797155226,1.6881198565098121,0.792000792000792],[1.2969545585550966,1.5043054258740534,1.0813408626697105,1.4819205690574986,2.0132066355290705,1.7006802721088434,1.8776404318572997,2.673002673002673,2.440775305096913,1.3550135501355014,1.1013215859030836,0.6675567423230975],[0.9523809523809523,1.1456465431360827,0.9734728644439036,1.6284233900814211,1.2223071046600458,1.0141987829614605,0.9672619047619049,1.3991884706870015,1.7088174982911826,0.7963734378828718,0.6618470624172691,0.6341154090044389],[0.5220114842526535,0.6794093667904701,0.5271481286241434,1.4323078839207872,1.3024403619413216,1.3213918660989574,1.4257199885942402,1.4043150772373294,1.355380862022228,0.5155229694123038,0.5639097744360902,0.47475183426845063],[0.9874917709019092,1.0804321728691475,0.19318072056408772,0.7961783439490446,0.6195019204559534,0.4651162790697675,0.7673615551860853,1.271186440677966,1.8221574344023324,0.715307582260372,0.4546957671957672,0.43005708030338574],[0.6882063170095624,0.6288891831060506,0.2000800320128051,0.48557832378362625,0.5964807634953773,0.7347538574577517,0.8348116456224564,1.2819198030971182,1.1130468447541617,0.286368843069874,0.2744613695622341,0.286000286000286],[0.8910983960228871,0.655624568668047,0.1991873157517329,0.40507696462327847,0.4035512510088781,0.6535947712418301,0.8348794063079777,1.0915994304698624,1.0870549868647523,0.39904229848363926,0.03527336860670194,0.04708541293907148]]}');

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Number of games to play
    $games = 1;
    $mapLimit = null;

    $totalMoves = 0;
    for ($i = 0; $i < $games; $i++) {
      echo 'Game #' . $i . PHP_EOL;
      $startTime = microtime(true);
      $totalMoves += $this->playGame($mapLimit);
      echo 'Finishing the game took: ' . (microtime(true) - $startTime) . ' seconds' . PHP_EOL;

      echo 'Score so far: ' . (int)(($totalMoves / ($i + 1)) * 200) . PHP_EOL;
    }

    echo 'Avg moves: ' . ($totalMoves / $games) . PHP_EOL;
    echo 'Final score: ' . (int)(($totalMoves / $games) * 200) . PHP_EOL;
  }

  /**
   * Play a single game.
   *
   * @param int|null $mapLimit
   *
   * @return int Total moves of last map.
   * @throws DataException
   * @throws EngineException
   * @throws FatalException
   * @throws OutOfBoundsException
   * @throws SystemException
   */
  private function playGame(?int $mapLimit): int
  {
    $totalMoves = 0;
    $lastMapMoveCount = 0;
    $mapId = null;
    $step = 0;
    $mapsStarted = 0;

    while (true) {
      $fireResponse = $this->client->status();

      // If we're on a new map, it must mean that we successfully finished the last map during the previous fire action
      if ($mapId !== $fireResponse->mapId) {
        $mapId = $fireResponse->mapId;

        // Increment the total move counter, as the move count will be reset in the next response from the API
        $totalMoves += $lastMapMoveCount;

        // Validate that we are counting steps correctly
        if ($step !== $lastMapMoveCount) {
          // throw new SystemException('Step count does not match with the move count from the API: ' . $step . ' vs. ' . $lastMapMoveCount);
        }

        // Reset step counter
        $step = 0;

        echo '--- New map id: ' . $mapId . ' ---' . PHP_EOL;

        if ($mapsStarted > 0) {
          echo 'Last map move count: ' . $lastMapMoveCount . PHP_EOL;
          echo 'Score so far for this game: ' . (int)(($totalMoves / $mapsStarted) * 200) . PHP_EOL;
        }

        $this->logger->log('New map id: ' . $mapId);
        $mapsStarted++;

        if ($mapLimit !== null && $mapsStarted > $mapLimit) {
          echo 'Finished last map based on the limit, finished maps: ' . ($mapsStarted - 1) . PHP_EOL;
          return $totalMoves;
        }
      }

      try {
        $mapDataString = $this->storage->get('ai_map_' . $mapId);

        try {
          $mapData = json_decode($mapDataString, true, 512, JSON_THROW_ON_ERROR);
        } catch (JsonException $e) {
          throw new SystemException('Failed to decode json data of map ' . $mapId . ': ' . $e->getMessage(), $e->getCode(), $e);
        }

        $map = Map::fromSerializedData($mapData);
        $map->updateByFireResponseGrid($fireResponse->grid);
      } catch (NotFoundException) {
        $map = Map::fromFireResponseGrid($fireResponse->grid);
      }

      // 1. Initialize heat-map
      $map->initializeHeatMapByGrid();

      // 2. Fill in unknown cells that are 100% confirmed to be a certain shape, but are not yet fully destroyed (this also fills the corresponding heat-map values)
      $map->recalculateNewConfirmedShapeTypes();

      // 3. Recalculate the heat-map by all possible shape type placements
      // $targetMode = $map->recalculateHeatMapByUnconfirmedShapeTypePlacementsBasic();
      $targetMode = $map->recalculateHeatMapByUnconfirmedShapeTypePlacementsAdvanced();

      // 4. Mark unknown cells where no undiscovered shape type can be placed (aka. heat map value of 0) as WATER
      $map->updateGridByHeatMapZeroes();

      // 5. Get the coordinates for the next FIRE action
      $hit = $map->getNextUndiscoveredShipCell();
      if ($hit === null) {
        throw new SystemException('Fatal error: Unable to obtain next fire coordinates, cannot continue');
      }

      [$x, $y, $probability] = $hit;

      $avenger = null;
      if ($fireResponse->avengerAvailable) {
        [$overrideX, $overrideY, $avenger] = $this->evaluateWhichAvengerToUse($map, $targetMode, $probability);

        if ($overrideX !== null && $overrideY !== null) {
          $x = $overrideX;
          $y = $overrideY;
          $probability = Map::HEATMAP_MAXIMUM_VALUE;
        }

        echo 'Avenger available, current map: ' . PHP_EOL;
        echo $map->getMapWithHeatMapAsString();
      }

      // Print the inferred map, coordinates at which we're going to fire, and wait for user input
      if ($this->debug) {
        echo PHP_EOL;
        echo str_repeat('-', 120) . PHP_EOL;
        echo 'Step #' . $step . PHP_EOL;
        echo PHP_EOL;

        echo 'Inferred map:' . PHP_EOL;
        echo $map;

        echo 'Heat-map:' . PHP_EOL;
        echo $map->getHeatMapAsString();

        echo PHP_EOL;
        echo 'Avenger available: ' . ($fireResponse->avengerAvailable ? 'YES' : 'NO') . PHP_EOL;
        if ($avenger !== null) {
          echo 'Avenger to use: ' . $avenger->value . PHP_EOL;
        }

        echo PHP_EOL;
        echo 'Next fire at (' . $x . ', ' . $y . '), probability: ' . $probability . PHP_EOL;

        readline('Continue?: ');
      }

      // FIRE !!!
      $step++;
      if ($avenger === null) {
        $fireResponse = $this->client->fire($x, $y);
      } else {
        $fireResponse = $this->client->fireAvenger($x, $y, $avenger);
      }

      // Update the grid by the fire response
      if ($fireResponse->result && ($fireResponse->cell === Cell::SHIP->value || $fireResponse->cell === Cell::WATER->value)) {
        $map->setGridCell($x, $y, Cell::from($fireResponse->cell));
      }

      $map->updateByFireResponseGrid($fireResponse->grid);

      // If we used avenger in the last shot, update the map according to the hints
      if ($avenger !== null) {
        // We must recalculate confirmed shape types, because the last fire could've hit the previously non-destroyed submarine/battleship
        $map->recalculateNewConfirmedShapeTypes();

        // Iron man only responds with hints, but doesn't actually update the grid
        if ($avenger === Avenger::IRON_MAN) {
          $nonDestroyedShapeTypes = $map->getAllNotDestroyedShapeTypes();
//          if (empty($nonDestroyedShapeTypes) && !empty($fireResponse->avengerResult)) {
//            throw new SystemException('Iron man ability returned some result, but all ships are destroyed?');
//          }

          if (!empty($nonDestroyedShapeTypes)) {
            // Ascending sort order
            usort($nonDestroyedShapeTypes, static fn(ShapeType $a, ShapeType $b)
              => Shape::fromShapeType($a)->getOccupiedCells() - Shape::fromShapeType($b)->getOccupiedCells());

//            var_dump($nonDestroyedShapeTypes);

            foreach ($fireResponse->avengerResult as $avengerResult) {
              // X/Y swapped on purpose!
              [$aX, $aY] = [$avengerResult['mapPoint']['y'], $avengerResult['mapPoint']['x']];

              // Mark the cell as SHIP
              $map->setGridCell($aX, $aY, Cell::SHIP);

              $shapeType = $nonDestroyedShapeTypes[array_key_first($nonDestroyedShapeTypes)];

              // Workaround :P TODO: Make me prettier
              if ($shapeType === ShapeType::DESTROYER || $shapeType === ShapeType::SUBMARINE) {
                $map->setPossibleShipCellShapeTypes($aX, $aY, [ShapeType::DESTROYER, ShapeType::SUBMARINE]);
              } else {
                $map->setPossibleShipCellShapeTypes($aX, $aY, [$shapeType]);
              }
            }
          }
        }

        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        // NOTE: This whole section is just for debugging:

        // 1. Initialize heat-map
        $map->initializeHeatMapByGrid();

        // We must recalculate confirmed shape types, because the last fire could've hit the previously non-destroyed submarine/battleship
        $map->recalculateNewConfirmedShapeTypes();

        // 3. Recalculate the heat-map by all possible shape type placements
        // $map->recalculateHeatMapByUnconfirmedShapeTypePlacementsBasic();
        $map->recalculateHeatMapByUnconfirmedShapeTypePlacementsAdvanced();

        // 4. Mark unknown cells where no undiscovered shape type can be placed (aka. heat map value of 0) as WATER
        $map->updateGridByHeatMapZeroes();

        echo 'After avenger use: ' . PHP_EOL;
        echo $map->getMapWithHeatMapAsString();

        // echo '---- Fire response: ' . PHP_EOL;
        // echo Map::fromFireResponseGrid($fireResponse->grid);
        // echo $fireResponse . PHP_EOL;

        // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      }

      // Print result of the fire action
      if ($this->debug) {
        echo 'Result: ' . ($fireResponse->cell === Cell::SHIP->value ? ' HIT' : ' MISS') . PHP_EOL;
      }

      try {
        $serialized = json_encode($map->jsonSerialize(), JSON_THROW_ON_ERROR);
      } catch (JsonException $e) {
        throw new SystemException('Failed to encode json data of map ' . $mapId . ': ' . $e->getMessage(), $e->getCode(), $e);
      }

      // Store the inferred map for future use
      $this->logger->log('Saving map to storage: ' . $serialized);
      $this->storage->set('ai_map_' . $mapId, $serialized);

      // Update counters
      $lastMapMoveCount = $fireResponse->moveCount;

      // If we finished all maps of the game, finito
      if ($fireResponse->finished) {
        if ($step !== $lastMapMoveCount) {
          // throw new SystemException('Step count does not match with the move count from the API: ' . $step . ' vs. ' . $lastMapMoveCount);
        }

        $totalMoves += $lastMapMoveCount;
        echo 'Finished last map of the game, game move count: ' . $totalMoves . PHP_EOL;
        break;
      }
    }

    return $totalMoves;
  }

  /**
   * @param Map   $map
   * @param bool  $targetMode
   * @param float $nextProbability
   *
   * @return array{0: int|null, 1: int|null, 2: Avenger|null} [x to override fire action, y to override fire action, avenger to use].
   * @throws FatalException
   */
  private function evaluateWhichAvengerToUse(Map $map, bool $targetMode, float $nextProbability): array
  {
    $confirmedShapeTypeValueToBattleshipMap = $map->getConfirmedShapeTypeValueToBattleshipMap();

    $unconfirmedShapeTypes = [];
    $confirmedShapeTypeValueToNonDiscoveredCoordinatesMap = [];

    foreach (ShapeType::cases() as $shapeType) {
      if (!isset($confirmedShapeTypeValueToBattleshipMap[$shapeType->value])) {
        $unconfirmedShapeTypes[] = $shapeType;
      } else {
        $battleship = $confirmedShapeTypeValueToBattleshipMap[$shapeType->value];

        // Method can return empty array!
        $coords = $map->getAllNotDestroyedShipCellCoordinatesForBattleship($battleship);
        if (!empty($coords)) {
          $confirmedShapeTypeValueToNonDiscoveredCoordinatesMap[$shapeType->value] = $coords;
        }
      }
    }

    // Sort by number of non-discovered coordinates DESCENDING
    uasort($confirmedShapeTypeValueToNonDiscoveredCoordinatesMap, static fn (array $a, array $b) => count($b) - count($a));
//    var_dump($shapeTypeValueToCountMap);

    echo 'Non-discovered count: ' . count($map->getAllNotDiscoveredCoordinates()) . PHP_EOL;

    // If the next hit is guaranteed, do not use any avengers
    echo 'Next probability: ' . $nextProbability . PHP_EOL;

    if ($targetMode) {
      echo 'Delaying the use of an avenger due to target mode still being on' . PHP_EOL;
      return [null, null, null];
    }

    if (count($unconfirmedShapeTypes) > 1 && $nextProbability >= Map::HEATMAP_MAXIMUM_VALUE) {
      echo 'Delaying the use of an avenger due to high probability' . PHP_EOL;
      return [null, null, null];
    }

//    echo $map;
//    echo 'Heat-map:' . PHP_EOL;
//    echo $map->getHeatMapAsString();

    // If there is only one unconfirmed shape type, discover it!
    if (count($unconfirmedShapeTypes) === 1) {
      echo 'Selected iron_man because there is only one unconfirmed shape type' . PHP_EOL;
      return [null, null, Avenger::IRON_MAN];
    }

    if (count($unconfirmedShapeTypes) <= 3) {
      if (in_array(ShapeType::PATROL_BOAT, $unconfirmedShapeTypes, true)) {
        echo 'Selected iron_man because there are few unconfirmed shapes and patrol_boat is remaining' . PHP_EOL;
        return [null, null, Avenger::IRON_MAN];
      }

      if (in_array(ShapeType::SUBMARINE, $unconfirmedShapeTypes, true)) {
        echo 'Selected iron_man because there are few unconfirmed shapes and submarine is remaining' . PHP_EOL;
        return [null, null, Avenger::IRON_MAN];
      }

      if (in_array(ShapeType::BATTLESHIP, $unconfirmedShapeTypes, true)) {
        echo 'Selected iron_man because there are few unconfirmed shapes and battleship is remaining' . PHP_EOL;
        return [null, null, Avenger::IRON_MAN];
      }
    }

    // Patrol boat is a bitch to find, might as well discover it now :P
    if (in_array(ShapeType::PATROL_BOAT, $unconfirmedShapeTypes, true)) {
      echo 'Selected iron_man because patrol_boat is unconfirmed' . PHP_EOL;
      return [null, null, Avenger::IRON_MAN];
    }

    // If there are no unconfirmed shapes remaining, and there is non-destroyed ship, might as well destroy it
    if (count($unconfirmedShapeTypes) === 0 && count($confirmedShapeTypeValueToNonDiscoveredCoordinatesMap) > 0) {
      $firstShapeCoords = $confirmedShapeTypeValueToNonDiscoveredCoordinatesMap[array_key_first($confirmedShapeTypeValueToNonDiscoveredCoordinatesMap)];
      [$x, $y] = $firstShapeCoords[array_key_first($firstShapeCoords)];

      echo 'Selected hulk because there are no unconfirmed shapes remaining, x: ' . $x . ', y: ' . $y  . PHP_EOL;
      return [$x, $y, Avenger::HULK];
    }

    echo 'Defaulting to iron_man' . PHP_EOL;
    return [null, null, Avenger::IRON_MAN];
  }
}
