<?php declare(strict_types = 1);

namespace Electry\Battleships\Tests;

use Electry\Battleships\Bot\Engine\Map;
use Electry\Battleships\Bot\Engine\MapHelpers;
use Electry\Battleships\Bootstrap;
use Electry\Battleships\Model\Engine\Enums\ShapeType;
use Exception;
use PHPUnit\Framework\TestCase;
use Tracy\ILogger;

/**
 * Very basic test to validate that stuff is working (no real assertions done here).
 *
 * @copyright 2023 Electry Solutions
 * @author    Michal Chvila
 * @since     2023-12-16
 *
 * docker exec -it battleships php -dopcache.enable_cli=1 -dopcache.jit_buffer_size=1024M vendor/bin/phpunit tests/MapTest.php
 */
final class MapTest extends TestCase
{
  /**
   * Test.
   *
   * @return void
   * @throws Exception
   */
  public function testRecalculateNewConfirmedShapeTypes(): void
  {
    $container = Bootstrap::boot()->createContainer();

    echo 'Precomputing map helpers...' . PHP_EOL;
    MapHelpers::precompute($container->getByType(ILogger::class));

    // Store the initial bias grid
    Map::setBiasGridByJsonData('{"0": {"0": 2.8953220089614122, "1": 1.8456099360550908, "2": 1.4837997914869139, "3": 1.2585249531595981, "4": 1.348529613851862, "5": 1.2873550401427296, "6": 1.137065003282994, "7": 1.3394882945443296, "8": 1.2867040388582074, "9": 1.516848288121184, "10": 1.6806276518913064, "11": 2.697429906542056}, "1": {"0": 1.9651063829787232, "1": 1.5284367232248999, "2": 1.2420142336974511, "3": 1.0327071791320406, "4": 1.0200998657497466, "5": 1.0256407565964352, "6": 1.0325441458458544, "7": 1.0850563909774438, "8": 1.168522267206478, "9": 1.3040816949566492, "10": 1.4126339916589115, "11": 1.8303765680692496}, "2": {"0": 1.5037125418314574, "1": 1.1698554357942774, "2": 1.0572913860906104, "3": 0.9470938945301397, "4": 0.9023527891290434, "5": 0.9390119116335204, "6": 0.980530176296487, "7": 0.9674742345407243, "8": 0.9023527891290434, "9": 1.0353763897256147, "10": 1.132608663091993, "11": 1.1854084271372072}, "3": {"0": 1.0392089378375515, "1": 0.9842147189535176, "2": 0.881274905552968, "3": 0.8518199704869651, "4": 0.8458586562252277, "5": 0.7793849231153894, "6": 0.7184832859174964, "7": 0.6938586766250437, "8": 0.6447938936798866, "9": 0.7108990147783251, "10": 0.8310059887135782, "11": 0.8077975065425995}, "4": {"0": 0.7669136433316301, "1": 0.8968731792581084, "2": 0.8289851603638104, "3": 0.7908287865430893, "4": 0.8304298245614036, "5": 0.8474345441750989, "6": 0.842771905692705, "7": 0.789921052631579, "8": 0.6776315789473685, "9": 0.7348035138132688, "10": 0.6904904306220095, "11": 0.5653360658710871}, "5": {"0": 0.6740284071104914, "1": 0.8555828416983928, "2": 0.7233709273182957, "3": 0.6904904306220095, "4": 0.6206079265014905, "5": 0.6475001260334744, "6": 0.6952477465810194, "7": 0.8199573863636364, "8": 0.6583147348800705, "9": 0.71537595791497, "10": 0.7196858996702147, "11": 0.42340065834198004}, "6": {"0": 0.9462784695336752, "1": 1.0342313094828575, "2": 1.001754817654372, "3": 0.8744929873430094, "4": 0.8777867842959834, "5": 0.7306777043619149, "6": 0.8819477372108951, "7": 0.9084193040741388, "8": 0.8535776942355889, "9": 0.9277942189453274, "10": 0.8741200785790292, "11": 0.4873495599065924}, "7": {"0": 0.8337648840977947, "1": 1.0377312830157368, "2": 0.9540466612002255, "3": 0.9146839423709807, "4": 0.8298672027290448, "5": 0.8097755494362757, "6": 0.8843952775775055, "7": 0.9115932233367865, "8": 0.8535776942355889, "9": 0.9414010378057821, "10": 1.007081690816109, "11": 0.5757721847258703}, "8": {"0": 0.8326502251618351, "1": 0.9697939904706823, "2": 0.9898946594806468, "3": 0.875470982724709, "4": 0.8831026229427296, "5": 0.7751854178986792, "6": 0.9553496980569522, "7": 0.8591916160359174, "8": 0.9006677232296427, "9": 1.0039889594676346, "10": 0.9600702827404904, "11": 0.5442637303431322}, "9": {"0": 0.6985545524394928, "1": 0.888597712945316, "2": 0.7990988212719298, "3": 0.8106623228744939, "4": 0.6689126046650717, "5": 0.5796876609331549, "6": 0.6649167109693426, "7": 0.8374596306201746, "8": 0.9056047570850202, "9": 0.8422156930984633, "10": 0.9418127092182622, "11": 0.3903188961988304}, "10": {"0": 0.9928620571035431, "1": 0.9890808871072029, "2": 0.986853064087203, "3": 0.8528727140945583, "4": 0.863663376027742, "5": 0.7956693577878421, "6": 0.8994003544984133, "7": 1.061092639147947, "8": 1.0235505206867437, "9": 1.0452378078223081, "10": 0.9696248600223963, "11": 0.7691538974017321}, "11": {"0": 1.1654309384572543, "1": 1.0092241496753098, "2": 0.8477003054511278, "3": 0.6655213747163458, "4": 0.6735343218209234, "5": 0.6179304192685102, "6": 0.6446467812241075, "7": 0.7545094109445799, "8": 0.6604691075514874, "9": 0.41890420899854863, "10": 0.5372948045354544, "11": 0.019131976667108575}}');

    $grid =
      '************' .
      '************' .
      '**X*********' .
      '*XX*********' .
      '********X***' .
      '**X*********' .
      '************' .
      '************' .
      '************' .
      '******XX****' .
      '************' .
      '************';

    $map = Map::fromFireResponseGrid($container->getByType(ILogger::class), $grid);

    $map->initializeHeatMapByGrid();
    // $map->setPossibleShipCellShapeTypes(11, 11, [ShapeType::PATROL_BOAT]);

    $map->recalculateNewConfirmedShapeTypes();
    $delayAvenger = $map->recalculateHeatMapByUnconfirmedShapeTypePlacementsAdvanced();
    $map->updateGridByHeatMapZeroes();

    echo $map;
    echo 'Delay avenger: ' . ($delayAvenger ? 'YES' : 'NO') . PHP_EOL;
    echo $map->getHeatMapAsString();

    var_dump(array_keys($map->getConfirmedShapeTypeValueToBattleshipMap()));

    foreach (ShapeType::cases() as $shapeType) {
      var_dump(count($map->calculatePossibleBattleshipsForShapeTypeAndCoordinates($shapeType, 8, 8)));
    }
  }
}
